Technical Document Sections:

Title: Document Object Model (DOM)
------------------------------------------------------------------
First Section: Introduction to the DOM

**Use for reference link**
Source: https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction

The Document Object Model (DOM) is the data representation of the objects that comprise the structure and content of a document on the web. In this guide, we'll briefly introduce the DOM. We'll look at how the DOM represents an HTML or XML document in memory and how you use APIs to create web content and applications.

Here is an example of the DOM hierarchy:

Use image link below: 
https://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/DOM-model.svg/1024px-DOM-model.svg.pnghttps://upload.wikimedia.org/wikipedia/commons/thumb/5/5a/DOM-model.svg/220px-DOM-model.svg.png
-----------------------------------------------------------------
Second Section: What is the DOM?
**Use unordered List**
    The Document Object Model (DOM) is a programming interface for HTML and XML documents. It represents the page so that programs can change the document structure, style, and content. The DOM represents the document as nodes and objects. That way, programming languages can connect to the page.

    A Web page is a document. This document can be either displayed in the browser window or as the HTML source. But it is the same document in both cases. The Document Object Model (DOM) represents that same document so it can be manipulated. The DOM is an object-oriented representation of the web page, which can be modified with a scripting language such as JavaScript.

    The W3C DOM and WHATWG DOM standards are implemented in most modern browsers. Many browsers extend the standard, so care must be exercised when using them on the web where documents may be accessed by various browsers with different DOMs.

    For example, the standard DOM specifies that the querySelectorAll method in the code below must return a list of all the <p> elements in the document:

    ***Code example to be given:
        const paragraphs = document.querySelectorAll("p");
        // paragraphs[0] is the first <p> element
        // paragraphs[1] is the second <p> element, etc.
        alert(paragraphs[0].nodeName);

    All of the properties, methods, and events available for manipulating and creating web pages are organized into objects (for example, the document object that represents the document itself, the table object that implements the special HTMLTableElement DOM interface for accessing HTML tables, and so forth). This documentation provides an object-by-object reference to the DOM.

    The modern DOM is built using multiple APIs that work together. The core DOM defines the objects that fundamentally describe a document and the objects within it. This is expanded upon as needed by other APIs that add new features and capabilities to the DOM. For example, the HTML DOM API adds support for representing HTML documents to the core DOM.

    ------------------------------------------------------------
Third Section: DOM and JavaScript

    The short example above, like nearly all of the examples in this reference, is JavaScript. That is to say, it's written in JavaScript, but it uses the DOM to access the document and its elements. The DOM is not a programming language, but without it, the JavaScript language wouldn't have any model or notion of web pages, HTML documents, XML documents, and their component parts (e.g. elements). Every element in a document—the document as a whole, the head, tables within the document, table headers, text within the table cells—is part of the document object model for that document, so they can all be accessed and manipulated using the DOM and a scripting language like JavaScript.

    In the beginning, JavaScript and the DOM were tightly intertwined, but eventually, they evolved into separate entities. The page content is stored in the DOM and may be accessed and manipulated via JavaScript, so that we may write this approximative equation: API = DOM + JavaScript

    The DOM was designed to be independent of any particular programming language, making the structural representation of the document available from a single, consistent API. Though we focus exclusively on JavaScript in this reference documentation, implementations of the DOM can be built for any language, as this Python example demonstrates:

    ***Code Example:
        # Python DOM example
        import xml.dom.minidom as m
        doc = m.parse(r"C:\Projects\Py\chap1.xml")
        doc.nodeName # DOM property of document object
        _list = doc.getElementsByTagName("para")
------------------------------------------------------------
Fourth Section: Accessing the DOM
    You don't have to do anything special to begin using the DOM. Different browsers have different implementations of the DOM, and these implementations exhibit varying degrees of conformance to the actual DOM standard (a subject we try to avoid in this documentation), but every web browser uses some document object model to make web pages accessible via JavaScript.

    When you create a script–whether it's inline in a <script> element or included in the web page by means of a script loading instruction–you can immediately begin using the API for the document or window elements to manipulate the document itself or to get at the children of that document, which are the various elements in the web page. Your DOM programming may be something as simple as the following, which displays an alert message by using the alert() function from the window object, or it may use more sophisticated DOM methods to actually create new content, as in the longer example below.

    This following JavaScript will display an alert when the document is loaded (and when the whole DOM is available for use):
    
        **Code example:
      <body onload="window.alert('Welcome to my home page!');">

    Another example. This function creates a new H1 element, adds text to that element, and then adds the H1 to the tree for this document:
***Code Example:
<html>
  <head>
    <script>
       // run this function when the document is loaded
       window.onload = function() {

         // create a couple of elements in an otherwise empty HTML page
         const heading = document.createElement("h1");
         const heading_text = document.createTextNode("Big Head!");
         heading.appendChild(heading_text);
         document.body.appendChild(heading);
      }
    </script>
  </head>
  <body>
  </body>
</html>

  -----------------------------------------------------------
Fifth Section: DOM Interfaces
    This guide is about the objects and the actual things you can use to manipulate the DOM hierarchy. There are many points where understanding how these work can be confusing. For example, the object representing the HTML form element gets its name property from the HTMLFormElement interface but its className property from the HTMLElement interface. In both cases, the property you want is in that form object.

    But the relationship between objects and the interfaces that they implement in the DOM can be confusing, and so this section attempts to say a little something about the actual interfaces in the DOM specification and how they are made available.

    Interfaces and Objects
        Many objects borrow from several different interfaces. The table object, for example, implements a specialized HTMLTableElement interface, which includes such methods as createCaption and insertRow. But since it's also an HTML element, table implements the Element interface described in the DOM Element Reference chapter. And finally, since an HTML element is also, as far as the DOM is concerned, a node in the tree of nodes that make up the object model for an HTML or XML page, the table object also implements the more basic Node interface, from which Element derives.

        When you get a reference to a table object, as in the following example, you routinely use all three of these interfaces interchangeably on the object, perhaps without knowing it.

        ***Code Example: 
        const table = document.getElementById("table");
        const tableAttrs = table.attributes; // Node/Element interface
        for (let i = 0; i < tableAttrs.length; i++) {
        // HTMLTableElement interface: border attribute
        if(tableAttrs[i].nodeName.toLowerCase() == "border")
        table.border = "1";
        }
        // HTMLTableElement interface: summary attribute
        table.summary = "note: increased border";

    Core Interfaces in the DOM:
       This section lists some of the most commonly-used interfaces in the DOM. The idea is not to describe what these APIs do here but to give you an idea of the sorts of methods and properties you will see very often as you use the DOM. These common APIs are used in the longer examples in the DOM Examples chapter at the end of this book.

       The document and window objects are the objects whose interfaces you generally use most often in DOM programming. In simple terms, the window object represents something like the browser, and the document object is the root of the document itself. Element inherits from the generic Node interface, and together these two interfaces provide many of the methods and properties you use on individual elements. These elements may also have specific interfaces for dealing with the kind of data those elements hold, as in the table object example in the previous section.

       The following is a brief list of common APIs in web and XML page scripting using the DOM.
       ***Make unordered list: 
            document.querySelector(selector)
            document.querySelectorAll(name)
            document.createElement(name)
            parentNode.appendChild(node)
            element.innerHTML
            element.style.left
            element.setAttribute()
            element.getAttribute()
            element.addEventListener()
            window.content
            GlobalEventHandlers/onload
            window.scrollTo()



